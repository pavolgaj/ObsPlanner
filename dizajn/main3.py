#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Oct 19, 2019 05:42:47 PM

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import main3_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    main3_support.set_Tk_var()
    top = New_Toplevel (root)
    main3_support.init(root, top)
    
    Popupmenu1 = Menu(root, tearoff=0)
    Popupmenu1.configure(activebackground="#f9f9f9")
    file = Menu(Popupmenu1,tearoff=0)
    Popupmenu1.add_cascade(menu=file,
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="File")
    file.add_command(
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            command=main3_support.NewFile,
            font="TkMenuFont",
            foreground="#000000",
            label="New")
    file.add_command(
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            command=main3_support.OpenFile,
            font="TkMenuFont",
            foreground="#000000",
            label="Open")
    file.add_command(
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            command=main3_support.SaveFile,
            font="TkMenuFont",
            foreground="#000000",
            label="Save")
    file.add_separator(
            background="#d9d9d9")
    file.add_command(
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            command=main3_support.Exit,
            font="TkMenuFont",
            foreground="#000000",
            label="Exit")
    import_export = Menu(Popupmenu1,tearoff=0)
    Popupmenu1.add_cascade(menu=import_export,
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="Import/Export",
            state=DISABLED)
    Popupmenu1.add_command(
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            command=main3_support.Settings,
            font="TkMenuFont",
            foreground="#000000",
            label="Settings")
    Popupmenu1.add_command(
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            command=main3_support.About,
            font="TkMenuFont",
            foreground="#000000",
            label="About")
    #Popupmenu1.post(event.x_root, event.y_root)
    root.config(menu=Popupmenu1)
    
    root.mainloop()

w = None
def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    main3_support.set_Tk_var()
    top = New_Toplevel (w)
    main3_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("834x451+347+189")
        top.title("New Toplevel")
        top.configure(highlightcolor="black")



        self.Canvas1 = Canvas(top)
        self.Canvas1.place(relx=0.66, rely=0.53, relheight=0.42, relwidth=0.32)
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(relief=RIDGE)
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(width=271)

        self.Canvas2 = Canvas(top)
        self.Canvas2.place(relx=0.66, rely=0.13, relheight=0.38, relwidth=0.32)
        self.Canvas2.configure(borderwidth="2")
        self.Canvas2.configure(relief=RIDGE)
        self.Canvas2.configure(selectbackground="#c4c4c4")
        self.Canvas2.configure(width=271)

        self.Entry1 = Entry(top)
        self.Entry1.place(relx=0.68, rely=0.04,height=23, relwidth=0.2)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(selectbackground="#c4c4c4")

        self.Button1 = Button(top)
        self.Button1.place(relx=0.92, rely=0.04, height=21, width=55)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(command=main3_support.NowTime)
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Now''')

        self.Labelframe0 = LabelFrame(top)
        self.Labelframe0.place(relx=0.01, rely=0.02, relheight=0.96
                , relwidth=0.34)
        self.Labelframe0.configure(text='''Objects''')
        self.Labelframe0.configure(width=280)

        self.Scrolledlistbox1 = ScrolledListBox(self.Labelframe0)
        self.Scrolledlistbox1.place(relx=0.04, rely=0.12, relheight=0.5
                , relwidth=0.91, y=-13, h=6)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1.configure(width=10)
        self.Scrolledlistbox1.configure(listvariable=main3_support.objs)

        self.Text1 = Text(self.Labelframe0)
        self.Text1.place(relx=0.04, rely=0.64, relheight=0.29, relwidth=0.91
                , y=-13, h=6)
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(width=256)
        self.Text1.configure(wrap=WORD)

        self.Button2 = Button(self.Labelframe0)
        self.Button2.place(relx=0.36, rely=0.95, height=24, width=47, y=-13, h=6)

        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(command=main3_support.EditObj)
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Edit''')

        self.Button3 = Button(self.Labelframe0)
        self.Button3.place(relx=0.64, rely=0.95, height=24, width=47, y=-13, h=6)

        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(command=main3_support.DelObj)
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Delete''')

        self.Button3_2 = Button(self.Labelframe0)
        self.Button3_2.place(relx=0.07, rely=0.95, height=24, width=47, y=-13
                , h=6)
        self.Button3_2.configure(activebackground="#d9d9d9")
        self.Button3_2.configure(command=main3_support.AddObj)
        self.Button3_2.configure(pady="0")
        self.Button3_2.configure(text='''Add''')

        self.Label1 = Label(self.Labelframe0)
        self.Label1.place(relx=0.07, rely=0.05, height=21, width=39, y=-13, h=6)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Show''')

        self.TCombobox1 = ttk.Combobox(self.Labelframe0)
        self.TCombobox1.place(relx=0.36, rely=0.05, relheight=0.05, relwidth=0.58
                , y=-13, h=6)
        self.TCombobox1.configure(textvariable=main3_support.combobox)
        self.TCombobox1.configure(takefocus="")

        self.Labelframe1 = LabelFrame(top)
        self.Labelframe1.place(relx=0.36, rely=0.02, relheight=0.96
                , relwidth=0.3)
        self.Labelframe1.configure(relief=GROOVE)
        self.Labelframe1.configure(text='''Observations''')
        self.Labelframe1.configure(width=250)

        self.Scrolledlistbox2 = ScrolledListBox(self.Labelframe1)
        self.Scrolledlistbox2.place(relx=0.04, rely=0.05, relheight=0.45
                , relwidth=0.92, y=-13, h=6)
        self.Scrolledlistbox2.configure(background="white")
        self.Scrolledlistbox2.configure(font="TkFixedFont")
        self.Scrolledlistbox2.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox2.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox2.configure(width=10)

        self.Text2 = Text(self.Labelframe1)
        self.Text2.place(relx=0.04, rely=0.52, relheight=0.33, relwidth=0.94
                , y=-13, h=6)
        self.Text2.configure(background="white")
        self.Text2.configure(font="TkTextFont")
        self.Text2.configure(selectbackground="#c4c4c4")
        self.Text2.configure(width=234)
        self.Text2.configure(wrap=WORD)

        self.Button4 = Button(self.Labelframe1)
        self.Button4.place(relx=0.08, rely=0.95, height=21, width=51, y=-13, h=6)

        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(command=main3_support.AddObs)
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Add''')

        self.Button5 = Button(self.Labelframe1)
        self.Button5.place(relx=0.36, rely=0.95, height=21, width=51, y=-13, h=6)

        self.Button5.configure(activebackground="#d9d9d9")
        self.Button5.configure(command=main3_support.EditObs)
        self.Button5.configure(pady="0")
        self.Button5.configure(text='''Edit''')

        self.Button6 = Button(self.Labelframe1)
        self.Button6.place(relx=0.68, rely=0.95, height=21, width=69, y=-13, h=6)

        self.Button6.configure(activebackground="#d9d9d9")
        self.Button6.configure(command=main3_support.DelObs)
        self.Button6.configure(pady="0")
        self.Button6.configure(text='''Delete''')

        self.Button7 = Button(self.Labelframe1)
        self.Button7.place(relx=0.36, rely=0.88, height=21, width=67, y=-13, h=6)

        self.Button7.configure(activebackground="#d9d9d9")
        self.Button7.configure(command=main3_support.ShowImg)
        self.Button7.configure(pady="0")
        self.Button7.configure(state=DISABLED)
        self.Button7.configure(text='''Image''')

#     @staticmethod
#     def popup1(event, *args, **kwargs):
#         Popupmenu1 = Menu(root, tearoff=0)
#         Popupmenu1.configure(activebackground="#f9f9f9")
#         file = Menu(Popupmenu1,tearoff=0)
#         Popupmenu1.add_cascade(menu=file,
#                 activebackground="#d9d9d9",
#                 activeforeground="#000000",
#                 background="#d9d9d9",
#                 font="TkMenuFont",
#                 foreground="#000000",
#                 label="File")
#         file.add_command(
#                 activebackground="#d9d9d9",
#                 activeforeground="#000000",
#                 background="#d9d9d9",
#                 command=main3_support.NewFile,
#                 font="TkMenuFont",
#                 foreground="#000000",
#                 label="New")
#         file.add_command(
#                 activebackground="#d9d9d9",
#                 activeforeground="#000000",
#                 background="#d9d9d9",
#                 command=main3_support.OpenFile,
#                 font="TkMenuFont",
#                 foreground="#000000",
#                 label="Open")
#         file.add_command(
#                 activebackground="#d9d9d9",
#                 activeforeground="#000000",
#                 background="#d9d9d9",
#                 command=main3_support.SaveFile,
#                 font="TkMenuFont",
#                 foreground="#000000",
#                 label="Save")
#         file.add_separator(
#                 background="#d9d9d9")
#         file.add_command(
#                 activebackground="#d9d9d9",
#                 activeforeground="#000000",
#                 background="#d9d9d9",
#                 command=main3_support.Exit,
#                 font="TkMenuFont",
#                 foreground="#000000",
#                 label="Exit")
#         import_export = Menu(Popupmenu1,tearoff=0)
#         Popupmenu1.add_cascade(menu=import_export,
#                 activebackground="#d9d9d9",
#                 activeforeground="#000000",
#                 background="#d9d9d9",
#                 font="TkMenuFont",
#                 foreground="#000000",
#                 label="Import/Export",
#                 state=DISABLED)
#         Popupmenu1.add_command(
#                 activebackground="#d9d9d9",
#                 activeforeground="#000000",
#                 background="#d9d9d9",
#                 command=main3_support.Settings,
#                 font="TkMenuFont",
#                 foreground="#000000",
#                 label="Settings")
#         Popupmenu1.add_command(
#                 activebackground="#d9d9d9",
#                 activeforeground="#000000",
#                 background="#d9d9d9",
#                 command=main3_support.About,
#                 font="TkMenuFont",
#                 foreground="#000000",
#                 label="About")
#         Popupmenu1.post(event.x_root, event.y_root)
#         root.config(menu=Popupmenu1)



# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



